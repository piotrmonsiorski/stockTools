// const fmpAPI = "https://financialmodelingprep.com/api/v3/";
const nbpAPI = 'http://api.nbp.pl/api/';
const format = '?format=json';
// http://api.nbp.pl/

const currentDate = new Date();
const minDate = new Date('2013-01-01'); // nbpAPI doesn't support previous data
minDate.setHours(0,0,0);
const apiMaxDays = 367;

const apiMinDate = `${minDate.getFullYear()}-${minDate.getMonth()+1}-${minDate.getDate()}`;
const apiMaxDate = `${currentDate.getFullYear()}-${currentDate.getMonth()+1}-${currentDate.getDate()}`;

async function getGold(apiStartDate, apiEndDate) {
  // let response = await fetch(`${fmpAPI}/company/stock/list`);
  let response = await fetch(`${nbpAPI}cenyzlota/${apiStartDate}/${apiEndDate}${format}`);
  let json = await response.json();
  return json;
}

function initCharts() {
  updateFullChart(); // also updates mainChart
}

function updateMainChart(apiStartDate = apiInitStartDate, apiEndDate = apiInitEndDate) {
  // correct format to YYYY-MM-DD
  apiStartDate = setDateFormat(apiStartDate);
  apiEndDate = setDateFormat(apiEndDate);

  // set to closest working day
  let startIndex = goldDataset.findIndex( val => val.data >= apiStartDate );
  let endIndex = goldDataset.findIndex( val => val.data > apiEndDate );
  endIndex == -1 ? endIndex = goldDataset.length : false; // in case currentDay is not on the list
  apiStartDate = goldDataset[startIndex];
  apiEndDate = goldDataset[endIndex];

  const goldDatasetPiece = goldDataset.slice(startIndex, endIndex);
  drawChart('goldMain', goldDatasetPiece);
}

async function updateFullChart(apiStartDate = apiMinDate, apiEndDate = apiMaxDate) {
  // correct format to YYYY-MM-DD
  apiStartDate = setDateFormat(apiStartDate);
  apiEndDate = setDateFormat(apiEndDate);

  const startDate = apiStartDate.split('-');
  const endDate = apiEndDate.split('-');

  const years = endDate[0] - startDate[0];

  const timeSpans = [];
  for(let i = 0; i < years; i++) {
    timeSpans.push([`${Number(startDate[0])+i}-01-01` , `${Number(startDate[0])+i}-12-31`]);
  }
  timeSpans.push([`${endDate[0]}-01-01` , apiEndDate])

  const dataPromises = [];
  timeSpans.forEach( (span, index) => {
    dataPromises.push(getGold(span[0], span[1]));
  })

  Promise.all(dataPromises)
    .then( result => {
      goldDataset.push(result);
    })
    .then( () => {
      goldDataset = goldDataset[0].reduce( (acc,val,idx) => acc.concat(val), [] );
      drawChart('goldFull', goldDataset)
    })
    .then( () => {
      updateMainChart();
    });
}

function setDateFormat(date) {
  const dateArr = date.split('-')
  dateArr[0] = dateArr[0].padStart(4,0) // year
  dateArr[1] = dateArr[1].padStart(2,0) // month
  dateArr[2] = dateArr[2].padStart(2,0) // day
  return dateArr.join('-');
}


class CurrentDate {
  constructor() {
    const date = new Date();
    this.day = date.getDate().toString().padStart(2,0);
    this.month = (date.getMonth()+1).toString().padStart(2,0);
    this.year = date.getFullYear().toString().padStart(4,0);
  }

  makeDate(addYear, addMonth, addDay) {
    let day = Number(this.day) + addDay;
    let month = Number(this.month) + addMonth - 1;
    let year = Number(this.year) + addYear;

    // let date = new Date(`${year}-${month}-${day}`);
    let date = new Date;
    date.setYear(year);
    date.setMonth(month);
    date.setDate(day);

    day = date.getDate();
    month = date.getMonth()+1;
    year = date.getFullYear();
    return {
      'day': day,
      'month': month,
      'year': year
    }
  }
}


function drawChart(canvas, goldData) {
  let canvasNode = document.querySelector(`#${canvas}`);
  canvasNode.parentNode.innerHTML = `<canvas id="${canvas}">`; // remove previous chart if exists
  canvasNode = document.querySelector(`#${canvas}`);
  const canvasCtx = canvasNode.getContext('2d');

  const chartLabels = goldData.reduce( (acc, val, idx) => {
    acc.push(val.data);
    return acc;
  }, []);
  const chartData = goldData.reduce( (acc, val, idx) => {
    acc.push(val.cena);
    return acc;
  }, []);

  // const minTick = Math.round( ([...chartData].sort( (a,b) => a - b )[0] - 10) / 10 ) * 10; // 168 - 160
  // const maxTick = Math.round( ([...chartData].sort( (a,b) => b - a )[0] + 10) / 10 ) * 10; // 179 - 190

  const minTick = Math.round( [...chartData].sort( (a,b) => a - b )[0] * 0.975 );
  const maxTick = Math.round( [...chartData].sort( (a,b) => b - a )[0] * 1.025 );

  let aspectRatio = 2;
  switch(canvas) {
    case 'goldMain':
      aspectRatio = 2;
      break;
    case 'goldFull':
      aspectRatio = 6;
      break;
    default:
      break;
  }

  const goldMainChart = new Chart(canvasCtx, {
    type: 'line',
    data: {
      labels: chartLabels,
      datasets: [{
        data: chartData,
        backgroundColor: 'transparent',
        borderColor: [
          'rgba(255, 99, 132, 1)'
        ],
        borderWidth: 2,
        lineTension: 0
      }]
    },
    options: {
      aspectRatio: aspectRatio,
      legend: {
        display: false
      },
      scales: {
        yAxes: [{
          ticks: {
            min: minTick,
            max: maxTick,
            beginAtZero: false,
          }
        }],
        xAxes: [{
          ticks: {
          },
          gridLines: {
            display: false
          }
        }]
      }
    }
  });
}


// @koala-prepend "functions.js"
// @koala-prepend "classes.js"
// @koala-prepend "charts.js"

// @koala-append "buttons.js"

const currentDateObj = new CurrentDate();
const todayObj = currentDateObj.makeDate(0, 0, 0);
const lastWeekObj = currentDateObj.makeDate(0, 0, -7);
const lastMonthObj = currentDateObj.makeDate(0, -1, 0);
const lastYearObj = currentDateObj.makeDate(-1, 0, 0);

let apiInitStartDate = `${lastMonthObj.year}-${lastMonthObj.month}-${lastMonthObj.day}`;
let apiInitEndDate = `${currentDateObj.year}-${currentDateObj.month}-${currentDateObj.day}`;

// console.log(currentDate)
let goldDataset = [];
initCharts();


const btnChartWeek = document.querySelector('#chartWeek');
const btnChartMonth = document.querySelector('#chartMonth');
const btnChartYear = document.querySelector('#chartYear');
const btnChartFull = document.querySelector('#chartFull');
const btnOwnUnfold = document.querySelector('#chartOwn');
const btnOwnSet = document.querySelector('#chartOwnSet');
const btnSwapDates = document.querySelector('#swapDates');

const inpStartDay = document.querySelector('[name="startDay"]');
const inpStartMonth = document.querySelector('[name="startMonth"]');
const inpStartYear = document.querySelector('[name="startYear"]');
const inpEndDay = document.querySelector('[name="endDay"]');
const inpEndMonth = document.querySelector('[name="endMonth"]');
const inpEndYear = document.querySelector('[name="endYear"]');

const tooltipStartDate = document.querySelector('#ownStart .tooltip');
const tooltipEndDate = document.querySelector('#ownEnd .tooltip');
const tooltipSwapDates = document.querySelector('#swapDates .tooltip');

btnChartWeek.addEventListener('click', () => {
  apiStartDate = `${lastWeekObj.year}-${lastWeekObj.month}-${lastWeekObj.day}`;
  updateMainChart(apiStartDate, apiMaxDate);
});

btnChartMonth.addEventListener('click', () => {
  apiStartDate = `${lastMonthObj.year}-${lastMonthObj.month}-${lastMonthObj.day}`;
  updateMainChart(apiStartDate, apiMaxDate);
});

btnChartYear.addEventListener('click', () => {
  apiStartDate = `${lastYearObj.year}-${lastYearObj.month}-${lastYearObj.day}`;
  updateMainChart(apiStartDate, apiMaxDate);
});

btnChartFull.addEventListener('click', () => {
  updateMainChart(apiMinDate, apiMaxDate);
});

btnOwnUnfold.addEventListener('click', () => {
  document.querySelector('.own-wrap').classList.toggle('closed');
  event.target.classList.toggle('open');
});

btnOwnSet.addEventListener('click', () => {
  // tooltipStartDate.innerHTML = '';
  // tooltipEndDate.innerHTML = '';
  // tooltipSwapDates.innerHTML = '';
  tooltipStartDate.classList.remove('visible');
  tooltipEndDate.classList.remove('visible');
  tooltipSwapDates.classList.remove('visible');

  let formError = false;

  const startDay = inpStartDay.value;
  const startMonth = inpStartMonth.value;
  const startYear = inpStartYear.value;
  const endDay = inpEndDay.value;
  const endMonth = inpEndMonth.value;
  const endYear = inpEndYear.value;

  let startDate = new Date(`${startYear}-${startMonth}-${startDay}`);
  let endDate = new Date(`${endYear}-${endMonth}-${endDay}`);

  // check dates format
  if(startDate == 'Invalid Date') {
    tooltipStartDate.innerHTML = 'Niepoprawny format daty';
    tooltipStartDate.classList.add('visible');
    formError = true;
  }
  if(endDate == 'Invalid Date') {
    tooltipEndDate.innerHTML = 'Niepoprawny format daty';
    tooltipEndDate.classList.add('visible');
    formError = true;
  }

  // check if dates are in order
  if(!formError && startDate.getTime() > endDate.getTime()) {
    tooltipSwapDates.innerHTML = 'Niedprawidłowa kolejność dat';
    tooltipSwapDates.classList.add('visible');
    formError = true;
  }

  // check if startDate isn't before borderDate
  if(!formError && startDate.getTime() < minDate.getTime()) {
    tooltipStartDate.innerHTML = 'Niebsługiwana data';
    tooltipStartDate.classList.add('visible');
    formError = true;
  }

  // check if endDate isn't after currentDate
  if(!formError && endDate.getTime() > currentDate.getTime()) {
    tooltipEndDate.innerHTML = 'Data w przyszłości';
    tooltipEndDate.classList.add('visible');
    formError = true;
  }

  // check for apiMaxDays
  // if(!formError) {
  //   const setTime = (endDate.getTime() - startDate.getTime()) / 86400000; // convert ms to days
  //   if (setTime > apiMaxDays) {
  //     tooltipEndDate.innerHTML = 'Zbyt długi przedział czasu';
  //     tooltipEndDate.classList.add('visible');
  //     formError = true;
  //   }
  // }

  // set time if form is validated
  if(!formError) {
    apiStartDate = `${startYear}-${startMonth}-${startDay}`;
    apiEndDate = `${endYear}-${endMonth}-${endDay}`;
    updateMainChart(apiStartDate, apiEndDate);
  }
});

btnSwapDates.addEventListener('click', () => {
  const startDay = inpStartDay.value;
  const startMonth = inpStartMonth.value;
  const startYear = inpStartYear.value;

  inpStartDay.value = inpEndDay.value;
  inpStartMonth.value = inpEndMonth.value;
  inpStartYear.value = inpEndYear.value;

  inpEndDay.value = startDay;
  inpEndMonth.value = startMonth;
  inpEndYear.value = startYear;
});
