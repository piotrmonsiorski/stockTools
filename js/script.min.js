// https://www.worldtradingdata.com/

// const fmpAPI = "https://financialmodelingprep.com/api/v3/";
const nbpAPI = 'https://api.nbp.pl/api';
const format = '?format=json';
// http://api.nbp.pl/

const currentDate = new Date();
const minDate = new Date('2013-01-01'); // nbpAPI doesn't support previous data
minDate.setHours(0,0,0);
const apiMaxDays = 367;

const apiMinDate = setDateFormat(`${minDate.getFullYear()}-${minDate.getMonth()+1}-${minDate.getDate()}`);
const apiMaxDate = setDateFormat(`${currentDate.getFullYear()}-${currentDate.getMonth()+1}-${currentDate.getDate()}`);

async function getGold(apiStartDate, apiEndDate) {
  // let response = await fetch(`${fmpAPI}/company/stock/list`);
  let response = await fetch(`${nbpAPI}/cenyzlota/${apiStartDate}/${apiEndDate}${format}`);
  let json = await response.json();
  return json;
}

async function getCurrencies() {
  let response = await fetch(`${nbpAPI}/exchangerates/tables/a${format}`);
  let json = await response.json();
  return json[0].rates;
}

async function getCurrency(type, apiStartDate, apiEndDate) {
  let response = await fetch(`${nbpAPI}/exchangerates/rates/a/${type}/${apiStartDate}/${apiEndDate}${format}`);
  let json = await response.json();
  return json;
}

function initBoard() {
    let startDate = apiMinDate.split('-');
    let endDate = apiMaxDate.split('-');

    const years = endDate[0] - startDate[0];

    const timeSpans = [];
    for(let i = 0; i < years; i++) {
      timeSpans.push([`${Number(startDate[0])+i}-01-01` , `${Number(startDate[0])+i}-12-31`]);
    }
    timeSpans.push([`${endDate[0]}-01-01`, endDate.join('-')])

    startDate = startDate.join('-');
    endDate = endDate.join('-');

    const dataPromises = [];
    timeSpans.forEach( (span, index) => {
      dataPromises.push(getGold(span[0], span[1]));
    })

    Promise.all(dataPromises)
      .then( result => {
        goldDataset.push(result);
      })
      .then( () => {
        goldDataset = goldDataset[0].reduce( (acc,val,idx) => acc.concat(val), [] );
        chartdataList.push( new ChartData('gold', 'orange', goldDataset) )
        updateChart(startDate, endDate);

        updateButtons();
      });

    getCurrencies()
      .then(results => {
        const typeSelectEdit = document.querySelector('.data-edit [name="typeSelect"]');
        const typeSelectAdd = document.querySelector('.data-add [name="typeSelect"]');
        [typeSelectEdit, typeSelectAdd].forEach( node => {
          for(let result of results) {
            const optionNode = document.createElement('option');
            optionNode.value = result.code;
            optionNode.innerHTML = `${result.code} - ${result.currency}`;
            node.appendChild(optionNode);
          }
        });
      })
      .then( () => {
        // temp for development
        addData('USD', 'green');
        addData('EUR', 'blue');
      });

}

function updateChart() {
  drawChart();
}

function setDateFormat(date) {
  const dateArr = date.split('-')
  dateArr[0] = dateArr[0].padStart(4,0) // year
  dateArr[1] = dateArr[1].padStart(2,0) // month
  dateArr[2] = dateArr[2].padStart(2,0) // day
  return dateArr.join('-');
}

function updateButtons() {
  const dataButtonsNode = document.querySelector('.data-buttons');
  const dataButtons = [...document.querySelectorAll('.btn-data')];
  if(dataButtons) {
    for(let button of dataButtons) {
      button.remove();
    }
  }

  for(let chart of chartdataList) {
    const buttonNode = document.createElement('button');
    buttonNode.classList.add('btn');
    buttonNode.classList.add('btn-data');
    buttonNode.dataset.type = chart.type;
    buttonNode.style.backgroundColor = chart.getColor();
    buttonNode.style.borderColor = chart.getColor();
    buttonNode.innerHTML = `${chart.type}<span class="edit"><i class="fas fa-edit"></i></span>`;
    buttonNode.addEventListener('click', showEditPanel);
    dataButtonsNode.appendChild(buttonNode);
  }
}

function updateChartRanges() {
  const startDate = apiStartDate.split('-');
  const endDate = apiEndDate.split('-');

  document.querySelector('[name="startDay"]').value = Number(startDate[2]);
  document.querySelector('[name="startMonth"]').value = Number(startDate[1]);
  document.querySelector('[name="startYear"]').value = Number(startDate[0]);
  document.querySelector('[name="endDay"]').value = Number(endDate[2]);
  document.querySelector('[name="endMonth"]').value = Number(endDate[1]);
  document.querySelector('[name="endYear"]').value = Number(endDate[0]);
}

function showEditPanel() {
  const dataEditNode = document.querySelector('.data-edit');
  const dataAddNode = document.querySelector('.data-add');
  dataEditNode.classList.remove('hidden');
  dataAddNode.classList.add('hidden');

  const datalist = chartdataList[chartdataList.findIndex( chart => chart.type == this.dataset.type )];

  const inpTypeSelect = document.querySelector('.data-edit [name="typeSelect"]');
  const inpColorSelect = document.querySelector('.data-edit [name="colorSelect"]');
  const btnDataSave = document.querySelector('[name="dataSave"]');
  const btnDataRemove = document.querySelector('[name="dataRemove"]');
  const inpTypeEdited = document.querySelector('.data-edit [name="typeEdited"]');

  inpTypeSelect.value = datalist.type;
  inpColorSelect.value = datalist.color;
  btnDataSave.style.backgroundColor = datalist.getColor();
  btnDataSave.style.borderColor = datalist.getColor();
  btnDataRemove.style.backgroundColor = datalist.getColor();
  btnDataRemove.style.borderColor = datalist.getColor();
  inpTypeEdited.value = datalist.type;
}

function addData(type, color, index = false) {
  let startDate = apiMinDate.split('-');
  let endDate = apiMaxDate.split('-');

  const years = endDate[0] - startDate[0];

  const timeSpans = [];
  for(let i = 0; i < years; i++) {
    timeSpans.push([`${Number(startDate[0])+i}-01-01` , `${Number(startDate[0])+i}-12-31`]);
  }
  timeSpans.push([`${endDate[0]}-01-01`, endDate.join('-')])

  startDate = startDate.join('-');
  endDate = endDate.join('-');

  const dataPromises = [];
  timeSpans.forEach( (span, index) => {
    dataPromises.push(getCurrency(type, span[0], span[1]));
  })

  const currencyObj = {};
  currencyObj.type = type;
  currencyObj.dataset = [];

  Promise.all(dataPromises)
    .then( results => {
      for(let result of results) {
        currencyObj.dataset.push(result.rates);
      }
    })
    .then( () => {
      currencyObj.dataset = currencyObj.dataset.reduce( (acc,val,idx) => acc.concat(val), [] );
      currencyObj.dataset = currencyObj.dataset.map( val => {
        return {
          'data': val.effectiveDate,
          'cena': val.mid
        }
      });
      currencyDatasets.push(currencyObj);
      if (index !== false && index > -1) {
        chartdataList[index] = new ChartData(type, color, currencyObj.dataset);
      }
      else {
        chartdataList.push( new ChartData(type, color, currencyObj.dataset) )
      }

      updateChart(apiStartDate, apiEndDate);
      updateButtons();
    });
}

function editData(type, color, index) {
  if( !(type == inpEditTypeEdited.value) ) { // if dataType is edited
    if (inpEditTypeEdited.value == 'gold') {
      chartdataList[index].type = type;
      addData(type, color, index);
    }
    else if (!currencyDatasets.every( chart => chart.type != type)) { // also type != gold
      chartdataList[index].type = type;
      chartdataList[index].dataset = currencyDatasets[currencyDatasets.findIndex(chart => chart.type == type)].dataset;
    }
    else {
      addData(type, color, index);
    }
    inpEditTypeEdited.value = type;
  }
  chartdataList[index].color = color;

  updateChart();
  updateButtons();

  const colorHex = chartdataList[index].getColor();

  btnDataSave.style.backgroundColor = colorHex;
  btnDataSave.style.borderColor = colorHex;
  btnDataRemove.style.backgroundColor = colorHex;
  btnDataRemove.style.borderColor = colorHex;

  console.log(type, color, index);

}

function removeData(type) {
  if (chartdataList.length - 1) {
    dataEditNode.classList.add('hidden');
    const index = chartdataList.findIndex( chart => chart.type == type );
    chartdataList.splice(index,1);
    updateChart();
    updateButtons();
  }
  else {
    tooltipDataEdit.innerHTML = 'na wykresie musi byÄ‡ przyjemniej jeden zestaw danych';
    tooltipDataEdit.classList.add('visible');
  }

}

function checkTypeSelect(selectNode, operation) {
  const nodeValue = selectNode.value;

  if (operation == 'add') {
    if( !chartdataList.every( chart => chart.type != nodeValue ) ) {
      tooltipTypeSelectAdd.classList.add('visible');
      dataAddError = true;
    }
    else {
      dataAddError = false;
    }
  }
  else if (operation == 'edit') {
    if ( nodeValue == inpEditTypeEdited.value ) {
      dataEditError = false;
    }
    else if( !chartdataList.every( chart => chart.type != nodeValue ) ) {
      tooltipTypeSelectEdit.classList.add('visible');
      dataEditError = true;
    }
    else {
      dataEditError = false;
    }
  }
}


class ChartData {
  constructor(type, color, dataset) {
    this.type = type;
    this.color = color;
    this.dataset = dataset;
  }
  getColor() {
    let color = this.color;

    switch(color) {
      case 'red':
        color = '#bc1d28'; break;
      case 'blue':
        color = '#394fb2'; break;
      case 'violet':
        color = '#8a20c0'; break;
      case 'green':
        color = '#1f821b'; break;
      case 'orange':
        color = '#e08e19'; break;
      case 'grey':
        color = '#6b6b6b'; break;
      case 'black':
      default:
        color = '#22222'; break;
    }

    return color;
  }
}

class CurrentDate {
  constructor() {
    const date = new Date();
    this.day = date.getDate().toString().padStart(2,0);
    this.month = (date.getMonth()+1).toString().padStart(2,0);
    this.year = date.getFullYear().toString().padStart(4,0);
  }

  makeDate(addYear, addMonth, addDay) {
    let day = Number(this.day) + addDay;
    let month = Number(this.month) + addMonth - 1;
    let year = Number(this.year) + addYear;

    // let date = new Date(`${year}-${month}-${day}`);
    let date = new Date;
    date.setYear(year);
    date.setMonth(month);
    date.setDate(day);

    day = date.getDate();
    month = date.getMonth()+1;
    year = date.getFullYear();
    return {
      'day': day,
      'month': month,
      'year': year
    }
  }
}


const chartSettings = {
  minGold: 100,
  maxGold: 200,
  minCurrency: 3,
  maxCurrency: 5
}

document.querySelector('[name="goldMin"]').value = chartSettings.minGold;
document.querySelector('[name="goldMax"]').value = chartSettings.maxGold;
document.querySelector('[name="currencyMin"]').value = chartSettings.minCurrency;
document.querySelector('[name="currencyMax"]').value = chartSettings.maxCurrency;

function drawChart(_canvas = 'chartMain', _startDate = apiStartDate, _endDate = apiEndDate) {
  let canvasNode = document.querySelector(`#${_canvas}`);
  canvasNode.parentNode.innerHTML = `<canvas id="${_canvas}">`; // remove previous chart if exists
  canvasNode = document.querySelector(`#${_canvas}`);
  const canvasCtx = canvasNode.getContext('2d');

  // correct format to YYYY-MM-DD
  let startDate = setDateFormat(_startDate);
  let endDate = setDateFormat(_endDate);

  // set to closest working day
  let startIndex = goldDataset.findIndex( val => val.data >= startDate );
  let endIndex = goldDataset.findIndex( (val,idx) => {
    // console.log(val.data, endDate, idx);
    return val.data > endDate}
  );
  endIndex == -1 ? endIndex = goldDataset.length : false; // in case currentDay is not on the list

  const datasets = [];
  for (let chart of chartdataList) {
    const chartData = chart.dataset.reduce( (acc, val, idx) => {
      acc.push(val.cena);
      return acc;
    }, []) // reduce to 1 dim array
      .slice(startIndex, endIndex);

    let label = chart.type == 'gold' ? 'gold' : 'currency';

    datasets.push({
      data: chartData,
      yAxisID: label,
      backgroundColor: 'transparent',
      borderColor: chart.color,
      borderWidth: 2,
      lineTension: 0,
      pointRadius: 0
    });
  }

  const chartLabels = chartdataList[0].dataset.reduce( (acc, val, idx) => {
    acc.push(val.data);
    return acc;
  }, []) // reduce to 1 dim array
    .slice(startIndex, endIndex);

  // const minTick = Math.round( ([...chartData].sort( (a,b) => a - b )[0] - 10) / 10 ) * 10; // 168 - 160
  // const maxTick = Math.round( ([...chartData].sort( (a,b) => b - a )[0] + 10) / 10 ) * 10; // 179 - 190

  // const minTick = Math.round( [...chartData].sort( (a,b) => a - b )[0] * 0.975 );
  // const maxTick = Math.round( [...chartData].sort( (a,b) => b - a )[0] * 1.025 );

  let aspectRatio = 3;

  const mainChart = new Chart(canvasCtx, {
    type: 'line',
    data: {
      labels: chartLabels,
      datasets: datasets
    },
    options: {
      aspectRatio: aspectRatio,
      legend: {
        display: false
      },
      scales: {
        yAxes: [{
          id: 'gold',
          position: 'left',
          ticks: {
            min: chartSettings.minGold,
            max: chartSettings.maxGold,
            stepSize: (chartSettings.maxGold - chartSettings.minGold) / 6
          }
        },{
          id: 'currency',
          position: 'right',
          ticks: {
            min: chartSettings.minCurrency,
            max: chartSettings.maxCurrency,
            stepSize: (chartSettings.maxCurrency - chartSettings.minCurrency) / 6
          }
        }],
        xAxes: [{
          ticks: {
          },
          gridLines: {
            display: false
          }
        }]
      }
    }
  });
}


// @koala-prepend "functions.js"
// @koala-prepend "classes.js"
// @koala-prepend "charts.js"

// @koala-append "buttons.js"

const currentDateObj = new CurrentDate();
const todayObj = currentDateObj.makeDate(0, 0, 0);
const lastWeekObj = currentDateObj.makeDate(0, 0, -7);
const lastMonthObj = currentDateObj.makeDate(0, -1, 0);
const lastYearObj = currentDateObj.makeDate(-1, 0, 0);

const startDate = lastYearObj;
const endDate = currentDateObj;

let apiStartDate = `${startDate.year}-${startDate.month}-${startDate.day}`;
let apiEndDate = `${endDate.year}-${endDate.month}-${endDate.day}`;

// console.log(currentDate)
let goldDataset = [];
const currencyDatasets = [];
let currencyList = [];

let chartdataList = [];

initBoard();


const navTabs = document.querySelectorAll('.navbar-tabs .tab');


const btnChartSettings = document.querySelector('[name="chartSettings"]');
const btnSettingsSave = document.querySelector('[name="settingsSave"]')
const btnSettingsCancel = document.querySelector('[name="settingsCancel"]')


const btnChartWeek = document.querySelector('#btnChartWeek');
const btnChartMonth = document.querySelector('#btnChartMonth');
const btnChartYear = document.querySelector('#btnChartYear');
const btnChartFull = document.querySelector('#btnChartFull');
const btnOwnUnfold = document.querySelector('#chartOwn');
const btnOwnSet = document.querySelector('#chartOwnSet');
const btnSwapDates = document.querySelector('#swapDates');

const inpStartDay = document.querySelector('[name="startDay"]');
const inpStartMonth = document.querySelector('[name="startMonth"]');
const inpStartYear = document.querySelector('[name="startYear"]');
const inpEndDay = document.querySelector('[name="endDay"]');
const inpEndMonth = document.querySelector('[name="endMonth"]');
const inpEndYear = document.querySelector('[name="endYear"]');

const tooltipStartDate = document.querySelector('.tooltip[name="startDate"]');
const tooltipEndDate = document.querySelector('.tooltip[name="endDate"]');
const tooltipSwapDates = document.querySelector('.tooltip[name="swapDates"]');


const btnChartAdd = document.querySelector('button[name="chartAdd"]');
const btnDataAdd = document.querySelector('button[name="dataAdd"]');
const btnDataSave = document.querySelector('button[name="dataSave"]');
const btnDataRemove = document.querySelector('button[name="dataRemove"]');
const btnsDataCancel = document.querySelectorAll('button[name="dataCancel"]');

const inpEditTypeSelect = document.querySelector('.data-edit [name="typeSelect"]');
const inpEditTypeEdited = document.querySelector('.data-edit [name="typeEdited"]');
const inpEditColorSelect = document.querySelector('.data-edit [name="colorSelect"]');
const inpAddTypeSelect = document.querySelector('.data-add [name="typeSelect"]');
const inpAddColorSelect = document.querySelector('.data-add [name="colorSelect"]');

const tooltipDataEdit = document.querySelector('.tooltip[name="dataEdit"]');
const tooltipDataAdd = document.querySelector('.tooltip[name="dataAdd"]');
const tooltipTypeSelectEdit = document.querySelector('.tooltip[name="dataEditType"]');
const tooltipTypeSelectAdd = document.querySelector('.tooltip[name="dataAddType"]');
const tooltipColorSelectEdit = document.querySelector('.tooltip[name="dataEditColor"]');
const tooltipColorSelectAdd = document.querySelector('.tooltip[name="dataAddColor"]');

let dataEditError = false;
let dataAddError = false;


function clearTooltips() {
  tooltipStartDate.classList.remove('visible');
  tooltipEndDate.classList.remove('visible');
  tooltipSwapDates.classList.remove('visible');

  tooltipTypeSelectEdit.classList.remove('visible');
  tooltipColorSelectEdit.classList.remove('visible');
  tooltipDataEdit.classList.remove('visible');

  tooltipTypeSelectAdd.classList.remove('visible');
  tooltipColorSelectAdd.classList.remove('visible');
  tooltipDataAdd.classList.remove('visible');
}



// - - - - - - -
// CHART SETTINGS
// - - - - - - -

btnChartSettings.addEventListener('click', () => {
  document.querySelector('.chart-settings').classList.remove('hidden');
});

btnSettingsSave.addEventListener('click', () => {
  const inpGoldMin = document.querySelector('[name="goldMin"]');
  const inpGoldMax = document.querySelector('[name="goldMax"]');
  const inpCurrencyMin = document.querySelector('[name="currencyMin"]');
  const inpCurrencyMax = document.querySelector('[name="currencyMax"]');

  // - - - - - - -
  // add < 0 check
  // - - - - - - -

  const goldMin = inpGoldMin.value ? inpGoldMin.value : chartSettings.minGold;
  const goldMax = inpGoldMax.value ? inpGoldMax.value : chartSettings.maxGold;
  const currencyMin = inpCurrencyMin.value ? inpCurrencyMin.value : chartSettings.minCurrency;
  const currencyMax = inpCurrencyMax.value ? inpCurrencyMax.value : chartSettings.maxCurrency;

  chartSettings.minGold = Number(goldMin);
  chartSettings.maxGold = Number(goldMax);
  chartSettings.minCurrency = Number(currencyMin);
  chartSettings.maxCurrency = Number(currencyMax);

  document.querySelector('.chart-settings').classList.add('hidden');
  updateChart();
});

btnSettingsCancel.addEventListener('click', () => {
  document.querySelector('.chart-settings').classList.add('hidden');
});


// - - - - - - -
// CHART RANGES
// - - - - - - -

btnChartWeek.addEventListener('click', () => {
  apiStartDate = `${lastWeekObj.year}-${lastWeekObj.month}-${lastWeekObj.day}`;
  apiEndDate = apiMaxDate;
  updateChartRanges();
  updateChart();
});

btnChartMonth.addEventListener('click', () => {
  apiStartDate = `${lastMonthObj.year}-${lastMonthObj.month}-${lastMonthObj.day}`;
  apiEndDate = apiMaxDate;
  updateChartRanges();
  updateChart();
});

btnChartYear.addEventListener('click', () => {
  apiStartDate = `${lastYearObj.year}-${lastYearObj.month}-${lastYearObj.day}`;
  apiEndDate = apiMaxDate;
  updateChartRanges();
  updateChart();
});

btnChartFull.addEventListener('click', () => {
  apiStartDate = apiMinDate;
  apiEndDate = apiMaxDate;
  updateChartRanges();
  updateChart();
});

btnOwnUnfold.addEventListener('click', () => {
  document.querySelector('.own-wrap').classList.toggle('closed');
  event.target.classList.toggle('btn-outline');
});

// init range inputs values
updateChartRanges();

btnOwnSet.addEventListener('click', () => {
  clearTooltips();

  let formError = false;

  const startDay = inpStartDay.value;
  const startMonth = inpStartMonth.value;
  const startYear = inpStartYear.value;
  const endDay = inpEndDay.value;
  const endMonth = inpEndMonth.value;
  const endYear = inpEndYear.value;

  let startDate = new Date(`${startYear}-${startMonth}-${startDay}`);
  let endDate = new Date(`${endYear}-${endMonth}-${endDay}`);

  // check dates format
  if(startDate == 'Invalid Date') {
    tooltipStartDate.innerHTML = 'Niepoprawny format daty';
    tooltipStartDate.classList.add('visible');
    formError = true;
  }
  if(endDate == 'Invalid Date') {
    tooltipEndDate.innerHTML = 'Niepoprawny format daty';
    tooltipEndDate.classList.add('visible');
    formError = true;
  }

  // check if dates are in order
  if(!formError && startDate.getTime() > endDate.getTime()) {
    tooltipSwapDates.innerHTML = 'NiedprawidÅ‚owa kolejnoÅ›Ä‡ dat';
    tooltipSwapDates.classList.add('visible');
    formError = true;
  }

  // check if startDate isn't before borderDate
  if(!formError && startDate.getTime() < minDate.getTime()) {
    tooltipStartDate.innerHTML = 'NiebsÅ‚ugiwana data';
    tooltipStartDate.classList.add('visible');
    formError = true;
  }

  // check if endDate isn't after currentDate
  if(!formError && endDate.getTime() > currentDate.getTime()) {
    tooltipEndDate.innerHTML = 'Data w przyszÅ‚oÅ›ci';
    tooltipEndDate.classList.add('visible');
    formError = true;
  }

  // check for apiMaxDays
  // if(!formError) {
  //   const setTime = (endDate.getTime() - startDate.getTime()) / 86400000; // convert ms to days
  //   if (setTime > apiMaxDays) {
  //     tooltipEndDate.innerHTML = 'Zbyt dÅ‚ugi przedziaÅ‚ czasu';
  //     tooltipEndDate.classList.add('visible');
  //     formError = true;
  //   }
  // }

  // set time if form is validated
  if(!formError) {
    apiStartDate = setDateFormat(`${startYear}-${startMonth}-${startDay}`);
    apiEndDate = setDateFormat(`${endYear}-${endMonth}-${endDay}`);
    updateChart();
  }
});

btnSwapDates.addEventListener('click', () => {
  const startDay = inpStartDay.value;
  const startMonth = inpStartMonth.value;
  const startYear = inpStartYear.value;

  inpStartDay.value = inpEndDay.value;
  inpStartMonth.value = inpEndMonth.value;
  inpStartYear.value = inpEndYear.value;

  inpEndDay.value = startDay;
  inpEndMonth.value = startMonth;
  inpEndYear.value = startYear;
});


// - - - - - - -
// CHARTS DATASETS
// - - - - - - -


const dataEditNode = document.querySelector('.data-edit');
const dataAddNode = document.querySelector('.data-add');

btnChartAdd.addEventListener('click', () => {
  dataEditNode.classList.add('hidden');
  dataAddNode.classList.remove('hidden');
});

inpAddTypeSelect.addEventListener('change', () => {
  clearTooltips();
  dataAddError = false;
  if( !chartdataList.every( chart => chart.type != inpAddTypeSelect.value ) ) {
    tooltipTypeSelectAdd.classList.add('visible');
    dataAddError = true;
  }
});
inpEditTypeSelect.addEventListener('change', () => {
  clearTooltips();
  dataEditError = false;
  if ( inpEditTypeSelect.value == inpEditTypeEdited.value ) {
    dataEditError = false;
  }
  else if( !chartdataList.every( chart => chart.type != inpEditTypeSelect.value ) ) {
    tooltipTypeSelectEdit.classList.add('visible');
    dataEditError = true;
  }
});

inpAddColorSelect.addEventListener('change', () => {
  clearTooltips();
  dataAddError = false;
  if( !chartdataList.every( chart => chart.color != inpAddColorSelect.value ) ) {
    tooltipColorSelectAdd.classList.add('visible');
    dataAddError = true;
  }
});
inpEditColorSelect.addEventListener('change', () => {
  clearTooltips();
  dataEditError = false;
  if( !chartdataList.every( chart => chart.color != inpEditColorSelect.value ) ) {
    tooltipColorSelectEdit.classList.add('visible');
    dataEditError = true;
  }
});

btnDataAdd.addEventListener('click', () => {
  clearTooltips();

  const dataType = inpAddTypeSelect.value;
  const dataColor = inpAddColorSelect.value;

  checkTypeSelect(inpAddTypeSelect, 'add');

  if(dataType == 'gold') {
    chartdataList.push( new ChartData(dataType, dataColor, goldDataset) );
    updateChart();
    updateButtons();
  }
  else if( !dataAddError ) {
    addData(dataType, dataColor);
  }
  else {
    console.log('error!');
  }
});

btnDataSave.addEventListener('click', () => {
  clearTooltips();

  const dataType = inpEditTypeSelect.value;
  const dataTypeEdited = inpEditTypeEdited.value;
  const dataColor = inpEditColorSelect.value;

  checkTypeSelect(inpEditTypeSelect, 'edit'); // add 'edit' to function

  const dataIndex = chartdataList.findIndex( chart => chart.type == dataTypeEdited );

  if( !dataEditError ) {
    editData(dataType, dataColor, dataIndex);
  }
  else {
    console.log('error!');
  }
});

btnDataRemove.addEventListener('click', () => {
  clearTooltips();
  removeData(inpEditTypeEdited.value);
});

btnsDataCancel.forEach( button => {
  button.addEventListener('click', () => {
    clearTooltips();
    dataEditNode.classList.add('hidden');
    dataAddNode.classList.add('hidden');
  });
});
